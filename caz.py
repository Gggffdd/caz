import os
import random
import asyncio
import logging
import datetime
import json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
from aiogram.client.default import DefaultBotProperties
from aiogram.types import WebAppData

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = "7523520150:AAGMPibPAl8D0I0E6ZeNR3zuIp0qKcshXN0"
WEB_APP_URL = "https://caz-mj5j43cm9-gggffdds-projects.vercel.app"
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –ò–≥—Ä–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
INITIAL_BALANCE = 1000
MIN_BET = 10
MAX_BET = 500
JACKPOT = 5000
DAILY_BONUS = 50
REFERRAL_BONUS = 100
FREE_SPINS_AFTER = 20
LEVEL_EXPERIENCE = [0, 100, 250, 500, 1000, 2000, 4000, 8000, 15000, 30000]

# –°–∏–º–≤–æ–ª—ã –¥–ª—è —Å–ª–æ—Ç–æ–≤ (—ç–º–æ–¥–∑–∏)
SLOT_SYMBOLS = {
    "üçí": {"name": "Cherry", "multiplier": [0, 0, 2, 5, 10], "color": "#FF0000"},
    "üçã": {"name": "Lemon", "multiplier": [0, 0, 2, 5, 10], "color": "#FFFF00"},
    "üçä": {"name": "Orange", "multiplier": [0, 0, 3, 10, 15], "color": "#FFA500"},
    "üçá": {"name": "Grapes", "multiplier": [0, 0, 5, 15, 25], "color": "#800080"},
    "üîî": {"name": "Bell", "multiplier": [0, 0, 10, 20, 50], "color": "#FFD700"},
    "‚≠ê": {"name": "Star", "multiplier": [0, 0, 15, 30, 75], "color": "#FFFFFF"},
    "7Ô∏è‚É£": {"name": "Seven", "multiplier": [0, 0, 25, 50, 100], "color": "#00FF00"},
    "üíé": {"name": "Diamond", "multiplier": [0, 0, 50, 100, 250], "color": "#00FFFF"},
    "üê∂": {"name": "Dog", "multiplier": [0, 0, 0, 0, 0], "is_wild": True, "color": "#FF69B4"},
    "üéÅ": {"name": "Bonus", "multiplier": [0, 0, 0, 0, 0], "is_scatter": True, "color": "#32CD32"}
}

# –í–µ—Å–∞ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
SYMBOL_WEIGHTS = [10, 10, 10, 8, 6, 5, 3, 2, 5, 1]  # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ—Ä—è–¥–∫—É SLOT_SYMBOLS.keys()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ë–î)
user_data = {}

# –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
ACHIEVEMENTS = {
    "first_win": {"name": "–ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞", "reward": 50, "emoji": "ü•á"},
    "big_win": {"name": "–ö—Ä—É–ø–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à", "reward": 100, "emoji": "üí∞"},
    "jackpot": {"name": "–î–∂–µ–∫–ø–æ—Ç", "reward": 500, "emoji": "üèÜ"},
    "level_5": {"name": "–ú–∞—Å—Ç–µ—Ä —Å–ª–æ—Ç–æ–≤", "reward": 200, "emoji": "üéì"},
    "referral": {"name": "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "reward": 150, "emoji": "üë•"}
}

# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
def get_main_keyboard(user_id):
    user = user_data.get(user_id, {"balance": INITIAL_BALANCE, "current_bet": MIN_BET})
    current_bet = user["current_bet"]
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text=f"üé∞ –ö—Ä—É—Ç–∏—Ç—å ({current_bet}‚Çø)", callback_data="spin"),
        InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")
    )
    builder.row(
        InlineKeyboardButton(text="‚ûñ", callback_data="decrease_bet"),
        InlineKeyboardButton(text=f"–°—Ç–∞–≤–∫–∞: {current_bet}‚Çø", callback_data="change_bet"),
        InlineKeyboardButton(text="‚ûï", callback_data="increase_bet")
    )
    builder.row(
        InlineKeyboardButton(text="üìä –¢–∞–±–ª–∏—Ü–∞ –≤—ã–ø–ª–∞—Ç", callback_data="paytable"),
        InlineKeyboardButton(text="üéÅ –ë–æ–Ω—É—Å—ã", callback_data="bonuses"),
        InlineKeyboardButton(text="üèÜ –õ–∏–¥–µ—Ä—ã", callback_data="leaders")
    )
    builder.row(
        InlineKeyboardButton(text="üéØ –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
        InlineKeyboardButton(text="üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements"),
        InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è Mini App
    builder.row(
        InlineKeyboardButton(
            text="üïπÔ∏è –ò–≥—Ä–∞—Ç—å –≤ Fullscreen", 
            web_app=WebAppInfo(url=f"{WEB_APP_URL}/?user_id={user_id}")
        )
    )
    return builder.as_markup()

def get_paytable_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return builder.as_markup()

def get_help_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    builder.add(InlineKeyboardButton(text="üì± –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/username"))
    return builder.as_markup()

def get_referral_keyboard(user_id):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", 
        url=f"https://t.me/share/url?url=/start=ref_{user_id}"
    ))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return builder.as_markup()

def get_achievements_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return builder.as_markup()

# ===== –ò–ì–†–û–í–ê–Ø –õ–û–ì–ò–ö–ê =====
async def spin_reels():
    symbols = list(SLOT_SYMBOLS.keys())
    
    reels = [
        random.choices(symbols, weights=SYMBOL_WEIGHTS, k=3),
        random.choices(symbols, weights=SYMBOL_WEIGHTS, k=3),
        random.choices(symbols, weights=SYMBOL_WEIGHTS, k=3)
    ]
    
    return reels

def check_win(reels, bet):
    lines = [
        [reels[0][0], reels[1][0], reels[2][0]],  # –í–µ—Ä—Ö–Ω—è—è
        [reels[0][1], reels[1][1], reels[2][1]],  # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è
        [reels[0][2], reels[1][2], reels[2][2]],  # –ù–∏–∂–Ω—è—è
        [reels[0][0], reels[1][1], reels[2][2]],  # –î–∏–∞–≥–æ–Ω–∞–ª—å \
        [reels[0][2], reels[1][1], reels[2][0]]   # –î–∏–∞–≥–æ–Ω–∞–ª—å /
    ]
    
    total_win = 0
    winning_lines = []
    bonus_triggered = False
    free_spins = 0
    jackpot_won = False
    
    for line_num, line in enumerate(lines):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ–Ω—É—Å (scatter —Å–∏–º–≤–æ–ª—ã)
        scatter_count = line.count("üéÅ")
        if scatter_count >= 3:
            bonus_triggered = True
            free_spins = scatter_count * 5  # 3+ scatter = —Ñ—Ä–∏—Å–ø–∏–Ω—ã
        
        # Wild —Å–∏–º–≤–æ–ª (üê∂) –∑–∞–º–µ–Ω—è–µ—Ç –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ (–∫—Ä–æ–º–µ scatter)
        normalized_line = []
        for symbol in line:
            if symbol == "üê∂":
                # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–µ-wild –∏ –Ω–µ-scatter —Å–∏–º–≤–æ–ª –≤ –ª–∏–Ω–∏–∏
                for s in line:
                    if s != "üê∂" and s != "üéÅ":
                        normalized_line.append(s)
                        break
                else:
                    normalized_line.append("üê∂")
            else:
                normalized_line.append(symbol)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        for symbol in SLOT_SYMBOLS:
            if symbol == "üéÅ" or symbol == "üê∂":
                continue
                
            count = normalized_line.count(symbol)
            if count >= 3:
                multiplier = SLOT_SYMBOLS[symbol]["multiplier"][count]
                win_amount = bet * multiplier
                total_win += win_amount
                winning_lines.append((line_num, symbol, count, win_amount))
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–∂–µ–∫–ø–æ—Ç (5 –∞–ª–º–∞–∑–æ–≤)
                if symbol == "üíé" and count == 5:
                    total_win += JACKPOT
                    jackpot_won = True
                break
    
    return {
        "total_win": total_win,
        "winning_lines": winning_lines,
        "bonus_triggered": bonus_triggered,
        "free_spins": free_spins,
        "jackpot_won": jackpot_won,
        "reels": reels
    }

async def show_spin_animation(message, chat_id, message_id, duration=1.5):
    symbols = list(SLOT_SYMBOLS.keys())
    frames = 12  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏
    
    # –†–∞–∑–Ω—ã–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
    speeds = [0.05, 0.05, 0.05, 0.07, 0.09, 0.1, 0.12, 0.15, 0.2, 0.3, 0.4, 0.5]
    
    for frame in range(frames):
        try:
            fake_reels = [
                [random.choice(symbols) for _ in range(3)],
                [random.choice(symbols) for _ in range(3)],
                [random.choice(symbols) for _ in range(3)]
            ]
            
            # –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–º–µ–¥–ª–µ–Ω–∏—è
            spin_text = "<b>üé∞ DOG HOUSE SLOTS üé∞</b>\n\n"
            spin_text += "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n"
            for row in range(3):
                spin_text += "‚ïë  " + "  ‚ïë  ".join([fake_reels[col][row] for col in range(3)]) + "  ‚ïë\n"
                if row < 2:
                    spin_text += "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£\n"
            spin_text += "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
            sound_emojis = ["üîä", "üîâ", "üîà"]
            spin_text += f"{sound_emojis[frame % 3]} –ë–∞—Ä–∞–±–∞–Ω—ã –∫—Ä—É—Ç—è—Ç—Å—è... {'üéµ' * (frame % 3)}\n"
            
            await bot.edit_message_text(
                spin_text,
                chat_id=chat_id,
                message_id=message_id,
                reply_markup=get_main_keyboard(message.from_user.id)
            )
            await asyncio.sleep(speeds[frame] if frame < len(speeds) else 0.1)
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏: {e}")

def format_reels(reels, winning_lines=None):
    if winning_lines is None:
        winning_lines = []
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    highlight = [[False for _ in range(3)] for _ in range(3)]
    
    for line in winning_lines:
        line_num = line[0]
        if line_num == 0:  # –í–µ—Ä—Ö–Ω—è—è –ª–∏–Ω–∏—è
            highlight[0][0] = True
            highlight[1][0] = True
            highlight[2][0] = True
        elif line_num == 1:  # –°—Ä–µ–¥–Ω—è—è –ª–∏–Ω–∏—è
            highlight[0][1] = True
            highlight[1][1] = True
            highlight[2][1] = True
        elif line_num == 2:  # –ù–∏–∂–Ω—è—è –ª–∏–Ω–∏—è
            highlight[0][2] = True
            highlight[1][2] = True
            highlight[2][2] = True
        elif line_num == 3:  # –î–∏–∞–≥–æ–Ω–∞–ª—å \
            highlight[0][0] = True
            highlight[1][1] = True
            highlight[2][2] = True
        elif line_num == 4:  # –î–∏–∞–≥–æ–Ω–∞–ª—å /
            highlight[0][2] = True
            highlight[1][1] = True
            highlight[2][0] = True
    
    result = "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n"
    for row in range(3):
        line = "‚ïë"
        for col in range(3):
            symbol = reels[col][row]
            if highlight[col][row]:
                line += f" üî•{symbol}üî• "
            else:
                line += f"  {symbol}  "
            if col < 2:
                line += "‚ïë"
        line += "‚ïë\n"
        result += line
        
        if row < 2:
            result += "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£\n"
    result += "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    return result

def check_achievements(user_id, win_amount=0, is_jackpot=False):
    user = user_data[user_id]
    new_achievements = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    if win_amount > 0 and "first_win" not in user.get("achievements", []):
        user.setdefault("achievements", []).append("first_win")
        new_achievements.append("first_win")
    
    if win_amount >= 500 and "big_win" not in user.get("achievements", []):
        user.setdefault("achievements", []).append("big_win")
        new_achievements.append("big_win")
    
    if is_jackpot and "jackpot" not in user.get("achievements", []):
        user.setdefault("achievements", []).append("jackpot")
        new_achievements.append("jackpot")
    
    if user.get("level", 0) >= 5 and "level_5" not in user.get("achievements", []):
        user.setdefault("achievements", []).append("level_5")
        new_achievements.append("level_5")
    
    if user.get("referrals", 0) >= 3 and "referral" not in user.get("achievements", []):
        user.setdefault("achievements", []).append("referral")
        new_achievements.append("referral")
    
    # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥ –∑–∞ –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    for achievement in new_achievements:
        reward = ACHIEVEMENTS[achievement]["reward"]
        user["balance"] += reward
    
    return new_achievements

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =====
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    referrer_id = None
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if len(message.text.split()) > 1:
        ref_code = message.text.split()[1]
        if ref_code.startswith("ref_"):
            try:
                referrer_id = int(ref_code[4:])
            except ValueError:
                pass
    
    if user_id not in user_data:
        user_data[user_id] = {
            "balance": INITIAL_BALANCE,
            "current_bet": MIN_BET,
            "total_spins": 0,
            "total_wins": 0,
            "bonuses": 3,
            "biggest_win": 0,
            "level": 1,
            "experience": 0,
            "referrals": 0,
            "last_bonus": None,
            "last_spins": [],
            "achievements": []
        }
        
        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        if referrer_id and referrer_id in user_data and referrer_id != user_id:
            user_data[referrer_id]["balance"] += REFERRAL_BONUS
            user_data[referrer_id]["referrals"] += 1
            await bot.send_message(
                referrer_id,
                f"üéâ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –∏–≥—Ä–æ–∫!\n"
                f"üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {REFERRAL_BONUS}‚Çø –±–æ–Ω—É—Å–∞!"
            )
            # –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ —Ç–æ–∂–µ –ø–æ–ª—É—á–∞–µ—Ç –±–æ–Ω—É—Å
            user_data[user_id]["balance"] += REFERRAL_BONUS
    
    user = user_data[user_id]
    
    welcome_text = f"""
üé∞ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Dog House Slots!</b> üê∂

üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {user['balance']}‚Çø
üéÅ <b>–ë–æ–Ω—É—Å–Ω—ã–µ —Å–ø–∏–Ω—ã:</b> {user['bonuses']}
üèÖ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {user['level']}

‚ú® <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
- –î–∏–∫–∏–µ —Å–∏–º–≤–æ–ª—ã üê∂ –∑–∞–º–µ–Ω—è—é—Ç –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ
- –ë–æ–Ω—É—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã üéÅ –∑–∞–ø—É—Å–∫–∞—é—Ç —Ñ—Ä–∏—Å–ø–∏–Ω—ã
- –î–∂–µ–∫–ø–æ—Ç {JACKPOT}‚Çø –∑–∞ 5 –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–æ–≤ üíé
- –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Ä–∞—â–µ–Ω–∏—è –∏ –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã

üéØ <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∏–≥—Ä—ã!</b>
    """
    
    await message.answer(
        welcome_text,
        reply_markup=get_main_keyboard(user_id)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Mini App
@dp.message(WebAppData)
async def web_app_data(message: types.Message):
    try:
        data = json.loads(message.web_app_data.data)
        user_id = message.from_user.id
        
        if user_id not in user_data:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å /start")
            return
            
        action = data.get("action")
        
        if action == "get_user_data":
            user = user_data[user_id]
            response = {
                "status": "success",
                "data": {
                    "balance": user["balance"],
                    "current_bet": user["current_bet"],
                    "bonuses": user["bonuses"],
                    "level": user["level"],
                    "experience": user["experience"],
                    "next_level_exp": LEVEL_EXPERIENCE[user["level"]] if user["level"] < len(LEVEL_EXPERIENCE) else 0,
                    "achievements": user.get("achievements", [])
                }
            }
            await message.answer(json.dumps(response))
            
        elif action == "spin":
            user = user_data[user_id]
            bet = data.get("bet", user["current_bet"])
            
            if bet < MIN_BET or bet > MAX_BET:
                await message.answer(json.dumps({"status": "error", "message": "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å—Ç–∞–≤–∫–∞"}))
                return
                
            if user["balance"] < bet and user["bonuses"] == 0:
                await message.answer(json.dumps({"status": "error", "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"}))
                return
                
            use_bonus = False
            if user["bonuses"] > 0:
                user["bonuses"] -= 1
                use_bonus = True
            else:
                user["balance"] -= bet
                
            spin_result = await spin_reels()
            win_info = check_win(spin_result, bet)
            win_amount = win_info["total_win"]
            user["balance"] += win_amount
            user["total_spins"] += 1
            
            if win_amount > 0:
                user["total_wins"] += 1
                if win_amount > user["biggest_win"]:
                    user["biggest_win"] = win_amount
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç
            exp_gain = min(1 + win_amount // 100, 10)
            user["experience"] += exp_gain
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
            level_up = False
            while user["level"] < len(LEVEL_EXPERIENCE) and user["experience"] >= LEVEL_EXPERIENCE[user["level"]]:
                user["level"] += 1
                level_up = True
                level_bonus = user["level"] * 100
                user["balance"] += level_bonus
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            new_achievements = check_achievements(user_id, win_amount, win_info["jackpot_won"])
            
            response = {
                "status": "success",
                "data": {
                    "reels": spin_result,
                    "win_amount": win_amount,
                    "winning_lines": win_info["winning_lines"],
                    "bonus_triggered": win_info["bonus_triggered"],
                    "free_spins": win_info["free_spins"],
                    "jackpot_won": win_info["jackpot_won"],
                    "new_balance": user["balance"],
                    "use_bonus": use_bonus,
                    "remaining_bonuses": user["bonuses"],
                    "level_up": level_up,
                    "new_level": user["level"] if level_up else None,
                    "new_achievements": new_achievements,
                    "experience": user["experience"],
                    "next_level_exp": LEVEL_EXPERIENCE[user["level"]] if user["level"] < len(LEVEL_EXPERIENCE) else 0
                }
            }
            
            if win_info["bonus_triggered"]:
                user["bonuses"] += win_info["free_spins"]
                response["data"]["remaining_bonuses"] = user["bonuses"]
            
            await message.answer(json.dumps(response))
            
        elif action == "change_bet":
            user = user_data[user_id]
            new_bet = data.get("bet", MIN_BET)
            
            if MIN_BET <= new_bet <= MAX_BET:
                user["current_bet"] = new_bet
                await message.answer(json.dumps({
                    "status": "success",
                    "new_bet": new_bet
                }))
            else:
                await message.answer(json.dumps({
                    "status": "error",
                    "message": f"–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–∂–¥—É {MIN_BET} –∏ {MAX_BET}"
                }))
                
    except Exception as e:
        logger.error(f"WebApp error: {e}")
        await message.answer(json.dumps({
            "status": "error",
            "message": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
        }))

@dp.callback_query(lambda c: c.data == "spin")
async def process_spin(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in user_data:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å /start", show_alert=True)
        return
    
    user = user_data[user_id]
    bet = user["current_bet"]
    use_bonus = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–æ–Ω—É—Å–Ω—ã–µ —Å–ø–∏–Ω—ã
    if user["bonuses"] > 0:
        user["bonuses"] -= 1
        use_bonus = True
        await callback.answer("üéÅ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –±–æ–Ω—É—Å–Ω—ã–π —Å–ø–∏–Ω!")
    else:
        if user["balance"] < bet:
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –£–º–µ–Ω—å—à–∏—Ç–µ —Å—Ç–∞–≤–∫—É.", show_alert=True)
            return
        user["balance"] -= bet
    
    # –ù–∞—á–∏–Ω–∞–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ
    user["total_spins"] += 1
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    await show_spin_animation(callback.message, callback.message.chat.id, callback.message.message_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    spin_result = await spin_reels()
    win_info = check_win(spin_result, bet)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    win_amount = win_info["total_win"]
    user["balance"] += win_amount
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if win_amount > 0:
        user["total_wins"] += 1
        if win_amount > user["biggest_win"]:
            user["biggest_win"] = win_amount
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç
    exp_gain = min(1 + win_amount // 100, 10)  # –û–ø—ã—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–∏–≥—Ä—ã—à–∞
    user["experience"] += exp_gain
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    level_up = False
    while user["level"] < len(LEVEL_EXPERIENCE) and user["experience"] >= LEVEL_EXPERIENCE[user["level"]]:
        user["level"] += 1
        level_up = True
        # –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        level_bonus = user["level"] * 100
        user["balance"] += level_bonus
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    user["last_spins"].append({
        "reels": spin_result,
        "win": win_amount,
        "timestamp": datetime.datetime.now().isoformat()
    })
    if len(user["last_spins"]) > 10:
        user["last_spins"].pop(0)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ–Ω—É—Å–Ω—ã–π —Ä–∞—É–Ω–¥
    if win_info["bonus_triggered"]:
        free_spins = win_info["free_spins"]
        user["bonuses"] += free_spins
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    new_achievements = check_achievements(user_id, win_amount, win_info["jackpot_won"])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_text = "<b>üé∞ DOG HOUSE SLOTS üé∞</b>\n\n"
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –±–∞—Ä–∞–±–∞–Ω—ã —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –ª–∏–Ω–∏–π
    result_text += format_reels(spin_result, win_info["winning_lines"]) + "\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –ª–∏–Ω–∏–∏
    if win_info["winning_lines"]:
        result_text += "üéâ <b>–í–´–ò–ì–†–´–®!</b> üéâ\n"
        for line in win_info["winning_lines"]:
            line_num, symbol, count, win = line
            line_names = ["–í–µ—Ä—Ö–Ω—è—è", "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è", "–ù–∏–∂–Ω—è—è", "–î–∏–∞–≥–æ–Ω–∞–ª—å \\", "–î–∏–∞–≥–æ–Ω–∞–ª—å /"]
            result_text += (
                f"‚û°Ô∏è <b>{line_names[line_num]} –ª–∏–Ω–∏—è:</b> "
                f"{count}x {symbol} = <b>{win}‚Çø</b>\n"
            )
        result_text += f"\nüí∞ <b>–û–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à:</b> {win_amount}‚Çø\n"
    else:
        result_text += "üò¢ <b>–ü–æ–≤–µ–∑—ë—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!</b>\n"
    
    # –î–∂–µ–∫–ø–æ—Ç
    if win_info["jackpot_won"]:
        result_text += f"\nüèÜ <b>–î–ñ–ï–ö–ü–û–¢!!!</b> üèÜ\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {JACKPOT}‚Çø –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ!\n"
    
    # –ë–æ–Ω—É—Å–Ω—ã–π —Ä–∞—É–Ω–¥
    if win_info["bonus_triggered"]:
        result_text += f"\nüéÅ <b>–ë–û–ù–£–°–ù–´–ô –†–ê–£–ù–î!</b> üéÅ\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ {win_info['free_spins']} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤!"
    
    # –£—Ä–æ–≤–µ–Ω—å
    if level_up:
        result_text += f"\nüèÜ <b>–£–†–û–í–ï–ù–¨ –ü–û–í–´–®–ï–ù!</b> üèÜ\n–¢–µ–ø–µ—Ä—å –≤—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ {user['level']}!"
    
    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if new_achievements:
        result_text += "\n\nüèÖ <b>–ù–û–í–´–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø!</b> üèÖ\n"
        for achievement in new_achievements:
            ach_data = ACHIEVEMENTS[achievement]
            reward = ach_data["reward"]
            result_text += f"{ach_data['emoji']} {ach_data['name']} +{reward}‚Çø\n"
    
    # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    result_text += (
        f"\nüíµ <b>–°—Ç–∞–≤–∫–∞:</b> {bet}‚Çø"
        f"\nüí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {user['balance']}‚Çø"
        f"\nüèÖ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {user['level']} (+{exp_gain} –æ–ø—ã—Ç–∞)"
    )
    
    if use_bonus:
        result_text += f"\nüéÅ <b>–û—Å—Ç–∞–ª–æ—Å—å –±–æ–Ω—É—Å–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤:</b> {user['bonuses']}"
    
    # –û—Å–æ–±—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if win_amount >= JACKPOT:
        result_text += "\n\nüéÜ <b>–ú–ï–ì–ê –î–ñ–ï–ö–ü–û–¢!!!</b> üéÜ"
    elif win_amount >= bet * 50:
        result_text += "\n\nüî• <b>–û–ì–†–û–ú–ù–´–ô –í–´–ò–ì–†–´–®!</b> üî•"
    elif win_amount >= bet * 20:
        result_text += "\n\n‚ú® <b>–û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢!</b> ‚ú®"
    
    # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–ø–∏–Ω—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    if user["total_spins"] % FREE_SPINS_AFTER == 0:
        user["bonuses"] += 1
        result_text += f"\n\nüéâ <b>–ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!</b> üéâ\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ 1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–ø–∏–Ω!"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await bot.edit_message_text(
            result_text,
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            reply_markup=get_main_keyboard(user_id)
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@dp.callback_query(lambda c: c.data in ["increase_bet", "decrease_bet"])
async def change_bet(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in user_data:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å /start", show_alert=True)
        return
    
    user = user_data[user_id]
    current_bet = user["current_bet"]
    
    if callback.data == "increase_bet":
        new_bet = min(current_bet * 2, MAX_BET)
    else:
        new_bet = max(current_bet // 2, MIN_BET)
    
    if new_bet != current_bet:
        user["current_bet"] = new_bet
        await callback.answer(f"–°—Ç–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞: {new_bet}‚Çø")
    else:
        if callback.data == "increase_bet":
            await callback.answer(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {MAX_BET}‚Çø")
        else:
            await callback.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {MIN_BET}‚Çø")
    
    try:
        await bot.edit_message_reply_markup(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            reply_markup=get_main_keyboard(user_id)
        )
    except TelegramBadRequest:
        pass

@dp.callback_query(lambda c: c.data == "paytable")
async def show_paytable(callback: types.CallbackQuery):
    paytable_text = """
<b>üìä –¢–ê–ë–õ–ò–¶–ê –í–´–ü–õ–ê–¢</b>

–í—ã–∏–≥—Ä—ã—à–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç —Å—Ç–∞–≤–∫–∏ –∑–∞ –ª–∏–Ω–∏—é:

üçí –í–∏—à–Ω—è:   2x | 5x | 10x
üçã –õ–∏–º–æ–Ω:   2x | 5x | 10x
üçä –ê–ø–µ–ª—å—Å–∏–Ω: 3x | 10x | 15x
üçá –í–∏–Ω–æ–≥—Ä–∞–¥: 5x | 15x | 25x
üîî –ö–æ–ª–æ–∫–æ–ª: 10x | 20x | 50x
‚≠ê –ó–≤–µ–∑–¥–∞:  15x | 30x | 75x
7Ô∏è‚É£ –°–µ–º—ë—Ä–∫–∞: 25x | 50x | 100x
üíé –ê–ª–º–∞–∑:   50x | 100x | 250x

<b>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã:</b>
üê∂ Wild - –∑–∞–º–µ–Ω—è–µ—Ç –ª—é–±—ã–µ —Å–∏–º–≤–æ–ª—ã (–∫—Ä–æ–º–µ –±–æ–Ω—É—Å–∞)
üéÅ Scatter - 3+ —Å–∏–º–≤–æ–ª–∞ –¥–∞—é—Ç 5-15 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤

<b>–î–∂–µ–∫–ø–æ—Ç:</b> {JACKPOT}‚Çø –∑–∞ 5 –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –ª—é–±–æ–π –ª–∏–Ω–∏–∏
    """.format(JACKPOT=JACKPOT)
    
    await callback.message.edit_text(
        paytable_text,
        reply_markup=get_paytable_keyboard()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "bonuses")
async def show_bonuses(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in user_data:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å /start", show_alert=True)
        return
    
    user = user_data[user_id]
    
    bonuses_text = f"""
üéÅ <b>–ë–û–ù–£–°–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò</b>

–£ –≤–∞—Å –µ—Å—Ç—å:
‚ú® <b>–ë–æ–Ω—É—Å–Ω—ã–µ —Å–ø–∏–Ω—ã:</b> {user['bonuses']}

–ë–æ–Ω—É—Å–Ω—ã–µ —Å–ø–∏–Ω—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –∏–≥—Ä–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ —Å —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–≤–∫–æ–π!

<b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –±–æ–Ω—É—Å–æ–≤?</b>
- –í—ã–ø–∞–≤—à–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å 3+ —Å–∏–º–≤–æ–ª–∞–º–∏ üéÅ
- –ö–∞–∂–¥—ã–µ {FREE_SPINS_AFTER} —Å–ø–∏–Ω–æ–≤ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ +1 —Å–ø–∏–Ω
- –ö—Ä—É–ø–Ω—ã–µ –≤—ã–∏–≥—Ä—ã—à–∏ –∏–Ω–æ–≥–¥–∞ –ø—Ä–∏–Ω–æ—Å—è—Ç –±–æ–Ω—É—Å—ã
- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å (/bonus)
- –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π (/referral)
- –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    """
    
    await callback.message.edit_text(
        bonuses_text,
        reply_markup=get_paytable_keyboard()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "leaders")
async def show_leaders(callback: types.CallbackQuery):
    # –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
    top_players = sorted(
        [(user_id, data["balance"]) for user_id, data in user_data.items()],
        key=lambda x: x[1],
        reverse=True
    )[:10]
    
    leaders_text = "<b>üèÜ –¢–û–ü-10 –ò–ì–†–û–ö–û–í</b>\n\n"
    for i, (user_id, balance) in enumerate(top_players):
        try:
            user = await bot.get_chat(user_id)
            name = user.first_name or user.username
            leaders_text += f"{i+1}. {name} - {balance}‚Çø\n"
        except:
            leaders_text += f"{i+1}. –ò–≥—Ä–æ–∫ #{user_id} - {balance}‚Çø\n"
    
    leaders_text += "\nüí° –ò–≥—Ä–∞–π—Ç–µ —á–∞—â–µ, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–ø!"
    
    await callback.answer(leaders_text, show_alert=True)

@dp.callback_query(lambda c: c.data == "stats")
async def show_stats(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in user_data:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å /start", show_alert=True)
        return
    
    user = user_data[user_id]
    
    win_percentage = user['total_wins'] / user['total_spins'] * 100 if user['total_spins'] > 0 else 0
    
    stats_text = f"""
üìä <b>–í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>

üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {user['balance']}‚Çø
üéÅ <b>–ë–æ–Ω—É—Å–Ω—ã–µ —Å–ø–∏–Ω—ã:</b> {user['bonuses']}
üèÖ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {user['level']} (–û–ø—ã—Ç: {user['experience']}/{LEVEL_EXPERIENCE[user['level']] if user['level'] < len(LEVEL_EXPERIENCE) else 'MAX'})

üé∞ <b>–í—Å–µ–≥–æ —Å–ø–∏–Ω–æ–≤:</b> {user['total_spins']}
üèÜ <b>–ü–æ–±–µ–¥–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤:</b> {user['total_wins']}
üìà <b>–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥:</b> {win_percentage:.1f}%

<b>–°–∞–º—ã–π –±–æ–ª—å—à–æ–π –≤—ã–∏–≥—Ä—ã—à:</b> {user.get('biggest_win', 0)}‚Çø
<b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞:</b> {user['current_bet']}‚Çø
<b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π:</b> {user['referrals']}
<b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π:</b> {len(user.get('achievements', []))}/{len(ACHIEVEMENTS)}
    """
    
    await callback.answer(stats_text, show_alert=True)

@dp.callback_query(lambda c: c.data == "achievements")
async def show_achievements(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in user_data:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å /start", show_alert=True)
        return
    
    user = user_data[user_id]
    achievements = user.get("achievements", [])
    
    achievements_text = "<b>üèÖ –í–ê–®–ò –î–û–°–¢–ò–ñ–ï–ù–ò–Ø</b>\n\n"
    
    if not achievements:
        achievements_text += "üò¢ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\n–ò–≥—Ä–∞–π—Ç–µ –±–æ–ª—å—à–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏—Ö!"
    else:
        for achievement in achievements:
            ach_data = ACHIEVEMENTS[achievement]
            achievements_text += f"{ach_data['emoji']} <b>{ach_data['name']}</b>\n"
    
    achievements_text += "\n\n<b>–î–û–°–¢–£–ü–ù–´–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø:</b>\n"
    for key, ach in ACHIEVEMENTS.items():
        if key not in achievements:
            achievements_text += f"üîí {ach['name']} - {ach['reward']}‚Çø\n"
    
    await callback.message.edit_text(
        achievements_text,
        reply_markup=get_achievements_keyboard()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "help")
async def show_help(callback: types.CallbackQuery):
    help_text = f"""
‚ùì <b>–ü–û–ú–û–©–¨ –ü–û –ò–ì–†–ï</b>

üé∞ <b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å?</b>
1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞–≤–∫—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ ‚ûñ/‚ûï
2. –ù–∞–∂–º–∏—Ç–µ "üé∞ –ö—Ä—É—Ç–∏—Ç—å"
3. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –≤—ã–ø–∞–≤—à–∏–º–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º–∏

üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>
- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: /bonus
- –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π: /referral
- –£—Ä–æ–≤–Ω–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
- –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–ø–∏–Ω—ã

‚öôÔ∏è <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>
–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.

üéØ <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã</b>
- –î–∂–µ–∫–ø–æ—Ç: {JACKPOT}‚Çø
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {MAX_BET}‚Çø
- –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–ø–∏–Ω—ã –∫–∞–∂–¥—ã–µ {FREE_SPINS_AFTER} –∏–≥—Ä
    """
    
    await callback.message.edit_text(
        help_text,
        reply_markup=get_help_keyboard()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in user_data:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å /start", show_alert=True)
        return
    
    user = user_data[user_id]
    
    main_text = f"""
üé∞ <b>DOG HOUSE SLOTS</b> üê∂

üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {user['balance']}‚Çø
üéÅ <b>–ë–æ–Ω—É—Å–Ω—ã–µ —Å–ø–∏–Ω—ã:</b> {user['bonuses']}
üèÖ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {user['level']}
üéØ <b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞:</b> {user['current_bet']}‚Çø

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    await callback.message.edit_text(
        main_text,
        reply_markup=get_main_keyboard(user_id)
    )
    await callback.answer()

@dp.message(Command("bonus"))
async def daily_bonus(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å /start")
        return
    
    user = user_data[user_id]
    today = datetime.date.today()
    
    if user.get("last_bonus") == str(today):
        await message.answer("üö´ –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è!\n–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
        return
    
    bonus_amount = DAILY_BONUS * user["level"]
    user["balance"] += bonus_amount
    user["last_bonus"] = str(today)
    
    await message.answer(
        f"üéÅ <b>–í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å!</b>\n"
        f"üí∞ +{bonus_amount}‚Çø (x{user['level']} –∑–∞ —É—Ä–æ–≤–µ–Ω—å)\n"
        f"üí≥ –¢–µ–ø–µ—Ä—å –≤–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']}‚Çø"
    )

@dp.message(Command("referral"))
async def referral_info(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å /start")
        return
    
    await message.answer(
        f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
        f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!\n\n"
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
        f"<code>https://t.me/{bot.username}?start=ref_{user_id}</code>\n\n"
        f"üí∏ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞:\n"
        f"- –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <b>{REFERRAL_BONUS}‚Çø</b>\n"
        f"- –î—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç <b>{REFERRAL_BONUS}‚Çø</b>\n\n"
        f"üí∞ –£–∂–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {user_data[user_id]['referrals']} —á–µ–ª–æ–≤–µ–∫",
        reply_markup=get_referral_keyboard(user_id)
    )

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
